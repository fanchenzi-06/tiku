/*考点：贪心算法  将物品按价值从低到高排序  将当前最高和最低加和看是否能成一组
                （局部最优）每组价值都在限制条件内最大=>(全局最优）分组数最少

题目：将物品进行分组 每组最多两件物品 要求价格之和不少于一个整数 使得分组数最少
输入形式：n+2行  第一行一个整数表示价格上限  第二行 一个整数表示购买物品总数
                3~n+2  包含一个正整数Pi（5<=Pi<=w3)
输出：一个整数  最少的分组数目*/

#include<iostream>
#include<algorithm>

using namespace std;

int main(){
	int w,nn;
	cin>>w>>nn;
	int a[nn];
	for(int i=0;i<nn;i++){
		cin>>a[i];
	}
	sort(a,a+nn);
	int f=0,l=nn-1,numbers=0;   //f从前往后遍历物品  l从后往前遍历物品
	while(f<=l){     //终止条件前后两个下标交叉
		if(f==l)
		{
			numbers++;     //指向同一个<=>这个即最后一个物品 单独装一个袋子
			break;
		}
		if(a[f]+a[l]<=w){      //看当前最大+最小是否超过价格上限
			numbers++;            //不超过则装入一个袋子  同时向内推进 迭代最大最小
			f++;
			l--;
		}
		else{
			l--;                //超过则最大单独装一个袋子  最大的向内推进 迭代
			numbers++;
		}
	}
	cout<<numbers;
	return 0;
}
